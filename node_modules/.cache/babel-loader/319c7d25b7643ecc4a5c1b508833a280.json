{"ast":null,"code":"var _jsxFileName = \"/Users/junghoonseo/Desktop/CSCE 310/GroupProject/Git/CSCE310CINEFILE/src/components/PlayTrailer.js\";\nimport React from 'react';\nimport YouTube from '@u-wave/react-youtube';\nimport './PlayTrailer.css';\nimport { Card, Container, Row, Col, ListGroup } from 'react-bootstrap'; //w: 960, h:540\n\nexport default function PlayTrailer(props) {\n  let content = [];\n  let temp = [];\n\n  function formatMovie() {\n    props.movieList.forEach((item, i) => {\n      temp.push(item);\n\n      if ((i + 1) % 3 === 0) {\n        content.push(temp);\n        temp = [];\n      }\n    });\n\n    if (!(temp === [])) {\n      content.push(temp);\n    }\n  }\n\n  if (props.id === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"mb-2\",\n      style: {\n        display: \"block\"\n      },\n      onClick: () => props.close(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }, \"Loading...\"));\n  }\n\n  if (props.id.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"mb-2\",\n      style: {\n        display: \"block\"\n      },\n      onClick: () => props.close(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, \"There is no trailer currently available.\"), /*#__PURE__*/React.createElement(Col, {\n      className: \"d-flex\",\n      key: movie.id,\n      sm: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"flex-fill\",\n      bg: \"light\",\n      text: \"dark\",\n      border: \"dark\",\n      style: {\n        width: '18rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Img, {\n      variant: \"top\",\n      src: `https://image.tmdb.org/t/p/w300_and_h450_bestv2${movie.poster_path}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 49\n      }\n    }, movie.original_title), /*#__PURE__*/React.createElement(ListGroup, {\n      variant: \"flush\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 53\n      }\n    }, description.map((word, index) => {\n      if (index === description.length - 1) {\n        return `${word}...`;\n      } else return `${word} `;\n    })), /*#__PURE__*/React.createElement(ListGroup.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"bottom\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 61\n      }\n    }, movie.release_date.split(\"-\")[0]))), /*#__PURE__*/React.createElement(ListGroup.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 53\n      }\n    }, genreTotal.map((title, index) => {\n      if (index === genreTotal.length - 1) {\n        return title.name;\n      } else return `${title.name}, `;\n    })), /*#__PURE__*/React.createElement(ListGroup.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Link, {\n      href: \"#\",\n      onClick: () => props.Modal(movie.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 57\n      }\n    }, \"Movie Information\")))))), /*#__PURE__*/React.createElement(Container, {\n      fluid: \"md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, content.map((item, index) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        key: index,\n        className: \"m-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, item.map(movie => {\n        let genreMovie = movie.genre_ids;\n        let genreTotal = [];\n        genreTotal = props.genreList.filter(x => genreMovie.includes(x.id));\n\n        if (genreTotal.length === 0) {\n          genreTotal.push({\n            name: \"Unidentified :(\"\n          });\n        } //console.log(movie);\n\n\n        let description = movie.overview.split(\" \").slice(0, 15); //console.log(description);\n        //console.log(genreTotal);\n\n        return /*#__PURE__*/React.createElement(Col, {\n          className: \"d-flex\",\n          key: movie.id,\n          sm: \"4\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Card, {\n          className: \"flex-fill\",\n          bg: \"light\",\n          text: \"dark\",\n          border: \"dark\",\n          style: {\n            width: '18rem'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Card.Img, {\n          variant: \"top\",\n          src: `https://image.tmdb.org/t/p/w300_and_h450_bestv2${movie.poster_path}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 45\n          }\n        }), /*#__PURE__*/React.createElement(Card.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Card.Title, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 49\n          }\n        }, movie.original_title), /*#__PURE__*/React.createElement(ListGroup, {\n          variant: \"flush\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(ListGroup.Item, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 53\n          }\n        }, description.map((word, index) => {\n          if (index === description.length - 1) {\n            return `${word}...`;\n          } else return `${word} `;\n        })), /*#__PURE__*/React.createElement(ListGroup.Item, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            float: \"bottom\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            float: \"right\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 61\n          }\n        }, movie.release_date.split(\"-\")[0]))), /*#__PURE__*/React.createElement(ListGroup.Item, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 53\n          }\n        }, genreTotal.map((title, index) => {\n          if (index === genreTotal.length - 1) {\n            return title.name;\n          } else return `${title.name}, `;\n        })), /*#__PURE__*/React.createElement(ListGroup.Item, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(Card.Link, {\n          href: \"#\",\n          onClick: () => props.Modal(movie.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 57\n          }\n        }, \"Movie Information\"))))));\n      }));\n    })));\n  }\n\n  console.log(props.id);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"mb-2\",\n    style: {\n      display: \"block\"\n    },\n    onClick: () => props.close(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Close\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trailer\",\n    style: {\n      height: `${props.id.length * 480}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, props.id.map(item => {\n    return /*#__PURE__*/React.createElement(YouTube, {\n      className: \"m-2\",\n      key: item.id,\n      video: item.key,\n      width: \"64%\",\n      height: \"540px\",\n      style: {\n        display: \"block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 24\n      }\n    });\n  })));\n}","map":{"version":3,"sources":["/Users/junghoonseo/Desktop/CSCE 310/GroupProject/Git/CSCE310CINEFILE/src/components/PlayTrailer.js"],"names":["React","YouTube","Card","Container","Row","Col","ListGroup","PlayTrailer","props","content","temp","formatMovie","movieList","forEach","item","i","push","id","display","close","length","movie","width","poster_path","original_title","description","map","word","index","float","release_date","split","genreTotal","title","name","Modal","genreMovie","genre_ids","genreList","filter","x","includes","overview","slice","console","log","height","key"],"mappings":"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","sourcesContent":["import React from 'react'\nimport YouTube from '@u-wave/react-youtube';\nimport './PlayTrailer.css';\nimport { Card, Container, Row, Col, ListGroup } from 'react-bootstrap';\n//w: 960, h:540\n\n\nexport default function PlayTrailer(props) {\n    let content = [];\n    let temp = [];\n    function formatMovie() {\n        props.movieList.forEach((item, i) => {\n            temp.push(item);\n            if ((i+1) % 3 === 0) {\n                content.push(temp);\n                temp = [];\n            }\n        })\n        if (!(temp === [])) {\n            content.push(temp);\n        }\n    }\n    if (props.id === null) {\n        return(\n            <div>\n                <button className=\"mb-2\" style={{display: \"block\"}} onClick={() => props.close()}>Close</button>\n                <p>Loading...</p>\n            </div>\n        )\n    }\n    if (props.id.length === 0) {\n        return(\n            <div>\n                <button className=\"mb-2\" style={{display: \"block\"}} onClick={() => props.close()}>Close</button>\n                <p>There is no trailer currently available.</p>\n                <Col className=\"d-flex\" key={movie.id} sm=\"4\">\n                                        <Card className=\"flex-fill\" bg=\"light\" text=\"dark\" border=\"dark\" style={{ width: '18rem' }}>\n                                            <Card.Img variant=\"top\" src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${movie.poster_path}`} />\n                                            <Card.Body>\n                                                <Card.Title>{movie.original_title}</Card.Title>\n                                                <ListGroup variant=\"flush\">\n                                                    <ListGroup.Item>\n                                                        {description.map((word, index) => {\n                                                            if (index === description.length - 1) {\n                                                                return (`${word}...`);\n                                                            } else return (`${word} `)\n                                                        })}\n                                                    </ListGroup.Item>\n                                                    <ListGroup.Item>\n                                                        <span style={{float: \"bottom\"}}>\n                                                            \n                                                            <span style={{float: \"right\"}}>{movie.release_date.split(\"-\")[0]}</span>\n                                                        </span>\n                                                    </ListGroup.Item>\n                                                    <ListGroup.Item>\n                                                        {genreTotal.map((title, index) => {\n                                                            if (index === genreTotal.length - 1) {\n                                                                return (title.name);\n                                                            } else return (`${title.name}, `)\n                                                        })}\n                                                    </ListGroup.Item>\n                                                    <ListGroup.Item>\n                                                        <Card.Link href=\"#\" onClick={() => props.Modal(movie.id)}>Movie Information</Card.Link>\n                                                    </ListGroup.Item>\n                                                </ListGroup>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n\n                <Container fluid=\"md\">\n                {content.map((item, index) => {\n                    return (\n                        <Row key={index} className=\"m-5\">\n                            {item.map(movie => {\n                                let genreMovie = movie.genre_ids;\n                                let genreTotal = [];\n                                genreTotal = props.genreList.filter((x) => genreMovie.includes(x.id))\n                                if (genreTotal.length === 0) {\n                                    genreTotal.push({name: \"Unidentified :(\"});\n                                }\n                                //console.log(movie);\n                                let description = movie.overview.split(\" \").slice(0, 15);\n                                //console.log(description);\n                                //console.log(genreTotal);\n                                return (\n                                    <Col className=\"d-flex\" key={movie.id} sm=\"4\">\n                                        <Card className=\"flex-fill\" bg=\"light\" text=\"dark\" border=\"dark\" style={{ width: '18rem' }}>\n                                            <Card.Img variant=\"top\" src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${movie.poster_path}`} />\n                                            <Card.Body>\n                                                <Card.Title>{movie.original_title}</Card.Title>\n                                                <ListGroup variant=\"flush\">\n                                                    <ListGroup.Item>\n                                                        {description.map((word, index) => {\n                                                            if (index === description.length - 1) {\n                                                                return (`${word}...`);\n                                                            } else return (`${word} `)\n                                                        })}\n                                                    </ListGroup.Item>\n                                                    <ListGroup.Item>\n                                                        <span style={{float: \"bottom\"}}>\n                                                            \n                                                            <span style={{float: \"right\"}}>{movie.release_date.split(\"-\")[0]}</span>\n                                                        </span>\n                                                    </ListGroup.Item>\n                                                    <ListGroup.Item>\n                                                        {genreTotal.map((title, index) => {\n                                                            if (index === genreTotal.length - 1) {\n                                                                return (title.name);\n                                                            } else return (`${title.name}, `)\n                                                        })}\n                                                    </ListGroup.Item>\n                                                    <ListGroup.Item>\n                                                        <Card.Link href=\"#\" onClick={() => props.Modal(movie.id)}>Movie Information</Card.Link>\n                                                    </ListGroup.Item>\n                                                </ListGroup>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                )\n                            })}\n                        </Row>\n                    )\n                })}\n            </Container>  \n            </div>\n        )\n    }\n    console.log(props.id);\n    return (\n        <div>\n            <button className=\"mb-2\" style={{display: \"block\"}} onClick={() => props.close()}>Close</button>\n            <div className=\"trailer\" style={{height: `${props.id.length*480}px`}}>\n            {props.id.map((item) => {\n                return <YouTube className=\"m-2\" key={item.id} video={item.key} width=\"64%\" height=\"540px\" style={{display: \"block\"}}></YouTube>\n            })}\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}